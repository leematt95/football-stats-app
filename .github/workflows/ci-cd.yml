name: 🚀 CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  POSTGRES_DB: football_db_test
  POSTGRES_USER: admin
  POSTGRES_PASSWORD: testpass123
  FLASK_ENV: testing

# Cancel previous workflow runs for the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🔍 Code Quality & Security
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  code-quality:
    name: 🔍 Code Quality & Security
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install flake8 black isort mypy bandit safety pytest-cov
        
    - name: 🎨 Code Formatting Check (Black)
      run: |
        echo "::group::🎨 Black Formatting Check"
        black --check --diff app/ import_players.py test_*.py || (
          echo "❌ Code formatting issues found!"
          echo "💡 Run: black app/ import_players.py test_*.py"
          exit 1
        )
        echo "✅ Code formatting is consistent"
        echo "::endgroup::"
        
    - name: 📐 Import Sorting Check (isort)
      run: |
        echo "::group::📐 Import Sorting Check"
        isort --check-only --diff app/ import_players.py test_*.py || (
          echo "❌ Import sorting issues found!"
          echo "💡 Run: isort app/ import_players.py test_*.py"
          exit 1
        )
        echo "✅ Import sorting is correct"
        echo "::endgroup::"
        
    - name: 🔎 Linting (Flake8)
      run: |
        echo "::group::🔎 Flake8 Linting"
        flake8 app/ import_players.py test_*.py --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 app/ import_players.py test_*.py --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        echo "✅ Linting completed"
        echo "::endgroup::"
        
    - name: 🔒 Security Scan (Bandit)
      run: |
        echo "::group::🔒 Security Analysis"
        bandit -r app/ import_players.py -f json -o bandit-report.json || true
        bandit -r app/ import_players.py || (
          echo "⚠️ Security issues detected!"
          echo "📋 Check bandit-report.json for details"
        )
        echo "✅ Security scan completed"
        echo "::endgroup::"
        
    - name: 🛡️ Dependency Security Check (Safety)
      run: |
        echo "::group::🛡️ Dependency Security Check"
        pip install safety
        safety check --json --output safety-report.json --continue-on-error || (
          echo "⚠️ Vulnerable dependencies detected!"
          echo "📋 Check safety-report.json for details"
        )
        echo "✅ Dependency security check completed"
        echo "::endgroup::"
        
    - name: 📊 Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🔬 Type Checking
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  type-checking:
    name: 🔬 Type Checking
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install mypy types-requests
        
    - name: 🔬 MyPy Type Checking
      run: |
        echo "::group::🔬 MyPy Type Analysis"
        mypy app/ --config-file mypy.ini --show-error-codes --pretty || (
          echo "❌ Type checking issues found!"
          echo "💡 Review type annotations and fix issues"
          exit 1
        )
        echo "✅ Type checking passed"
        echo "::endgroup::"

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🧪 Testing with Database
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  testing:
    name: 🧪 Testing Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐍 Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'requirements.txt'
        
    - name: 📦 Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock requests
        
    - name: ⚙️ Configure Test Environment
      run: |
        echo "DATABASE_URL=postgresql://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}" >> $GITHUB_ENV
        echo "FLASK_ENV=${{ env.FLASK_ENV }}" >> $GITHUB_ENV
        echo "SECRET_KEY=test-secret-key-for-ci" >> $GITHUB_ENV
        
    - name: 🗄️ Database Setup
      run: |
        echo "::group::🗄️ Database Initialization"
        PYTHONPATH=. python -c "
        from app.models.player import db
        from app.main import app
        with app.app_context():
            db.create_all()
            print('✅ Test database tables created')
        "
        echo "::endgroup::"
        
    - name: 🧪 Run Test Suite
      run: |
        echo "::group::🧪 Running Comprehensive Test Suite"
        pytest test_api_pytest.py -v \
          --cov=app \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=70 \
          --junitxml=pytest-results.xml || (
          echo "❌ Tests failed!"
          echo "📋 Check test output for details"
          exit 1
        )
        echo "✅ All tests passed"
        echo "::endgroup::"
        
    - name: 🔄 Runtime Validation Tests
      run: |
        echo "::group::🔄 Runtime Validation"
        python test_api_runtime.py || (
          echo "⚠️ Runtime validation detected issues"
          echo "📋 Check runtime test output"
        )
        echo "✅ Runtime validation completed"
        echo "::endgroup::"
        
    - name: 📊 Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          pytest-results.xml
          coverage.xml
          
    - name: 📈 Generate Coverage Report
      if: always()
      run: |
        echo "::group::📈 Coverage Summary"
        echo "Coverage report generated and saved as artifact"
        if [ -f coverage.xml ]; then
          echo "✅ Coverage XML report created"
        else
          echo "⚠️ Coverage XML report not found"
        fi
        echo "::endgroup::"

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 🐳 Docker Build & Test
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  docker-build:
    name: 🐳 Docker Build & Test
    runs-on: ubuntu-latest
    needs: [code-quality, type-checking, testing]
    
    steps:
    - name: 📥 Checkout Code
      uses: actions/checkout@v4
      
    - name: 🐳 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: 🔨 Build Docker Image
      run: |
        echo "::group::🔨 Building Docker Image"
        docker build -t football-stats-app:ci .
        echo "✅ Docker image built successfully"
        echo "::endgroup::"
        
    - name: 🔍 Test Docker Image
      run: |
        echo "::group::🔍 Testing Docker Image"
        # Test that the image runs and has required tools
        docker run --rm football-stats-app:ci python --version
        docker run --rm football-stats-app:ci curl --version
        echo "✅ Docker image validation passed"
        echo "::endgroup::"
        
    - name: 🏃 Integration Test with Docker Compose
      run: |
        echo "::group::🏃 Docker Compose Integration Test"
        # Quick smoke test with docker-compose
        docker-compose up -d --build
        sleep 10
        
        # Test API is responsive
        curl -f http://localhost:5000/api/players/ || (
          echo "❌ API health check failed"
          docker-compose logs web
          exit 1
        )
        
        docker-compose down
        echo "✅ Integration test passed"
        echo "::endgroup::"

  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  # 📋 Results Summary
  # ━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━
  summary:
    name: 📋 Pipeline Summary
    runs-on: ubuntu-latest
    needs: [code-quality, type-checking, testing, docker-build]
    if: always()
    
    steps:
    - name: 📋 Pipeline Results
      run: |
        echo "::group::📋 CI/CD Pipeline Summary"
        echo "🔍 Code Quality: ${{ needs.code-quality.result }}"
        echo "🔬 Type Checking: ${{ needs.type-checking.result }}"
        echo "🧪 Testing: ${{ needs.testing.result }}"
        echo "🐳 Docker Build: ${{ needs.docker-build.result }}"
        
        if [[ "${{ needs.code-quality.result }}" == "success" && \
              "${{ needs.type-checking.result }}" == "success" && \
              "${{ needs.testing.result }}" == "success" && \
              "${{ needs.docker-build.result }}" == "success" ]]; then
          echo "🎉 All checks passed! Ready for deployment 🚀"
        else
          echo "❌ Some checks failed. Please review the results."
          exit 1
        fi
        echo "::endgroup::"
